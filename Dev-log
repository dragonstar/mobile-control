Development Log
Implementation log

Using Python with Flask - https://www.fullstackpython.com/flask.html
SQLite as database layer - http://raspberrywebserver.com/sql-databases/accessing-an-sqlite-database-with-python.html
** not sure ** Uinsg Pyplate on Raspberry Pi as the CMS - http://raspberrywebserver.com/pyplate/install-pyplate-on-a-raspberry-pi.html
Manage code using GIT - maybe GITFLOW (We'll see)
HW - Raspbury Pi 4 Model B (with memory upgrade)

-----------------
Installed Rasperin
Works fine - with fully operational desktop env
Setup SSH access on Pi and remote laptop 
ref: [1] - https://towardsdatascience.com/python-webserver-with-flask-and-raspberry-pi-398423cc6
Using the SSH on laptop in root type or on pi
git init
sudo apt-get install python3-flask
 [already installed]
mkdir rpiWebServer
 - for info - a folder /home/pi/Documents/Server is created in this process
cd rpiWebServer
mkdir static
mkdir templates
Undertook instructions in [1] - all worked
 - - To server time / date display with CSS
  - Mapped drives to macbook
  - Installed Geany in macbook (although trouble connecting it to pi)
  - Camera integration - standalone on wifi
 push to github
 pull to dev evn on mac
 setup distriburted push for updates to dev & production
 Apply 4G and GPS interface
  - Raspberry pi 3g/4g &lte base hat installed 
  - https://sixfab.com/product/raspberry-pi-base-hat-3g-4g-lte-minipcie-cards/
  - Install PCLe Module with antennas - LTE +  GPS
  - https://sixfab.com/product/quectel-ec25-mini-pcle-4glte-module/
  - Tested -PASS - standalone internet accss - PASS
  Configure RBP as an internet access point - using raspAP
  - https://raspap.com/
  - https://github.com/billz/raspap-webgui
  - Test - PASS - using RBP as internet access point for other systems - phone, pc etc.. PASS
 INSTALL BLINK survellance camera on the RBP network 
  - followed instructions
  - PASS - Performance test to 15m PASS
 Installed openCPN
  - Dont forget to use :80 on key port
 Tested GPS
  - inside so no signal
  - run python Programming/GPStest.py (not on python 3)
  Turn on GPS data on USB1
   - use minicom 
   minicom -s
   setup serial port - USB2
   Hardware flow control - No
   Exit
   AT -> ok
   AT+QGPS=1   -> will turn on NMEA gps ON USB1
   
  
 
 
 
-----------------
 - To do --------
-----------------
 
 Order 12V psu - https://sixfab.com/product/raspberry-pi-power-management-ups-hat/
 Develop control interface
 Expose IP
 spec breadboard for GPIO testing
 Test control interface
 Robin to test interface
 ICD of control assets (Robin)
 
 -------------------
 -- sensors
 -------------------
  magnetic contact switch 
 https://thepihut.com/products/adafruit-magnetic-contact-switch-door-sensor?variant=27740417617&currency=GBP&gclid=Cj0KCQjw1Iv0BRDaARIsAGTWD1uOfNedpkLvQyhTvyA9oSCYs_R6SwYJ8vijZDWIFdinBILWMdptXd4aAljVEALw_wcB
 setup
 https://github.com/adafruit/Adafruit_Learning_System_Guides/blob/master/Raspberry_Pi_Sensing_Movement/Raspberry_Pi_Sensing_Movement.py
 or 
 https://learn.adafruit.com/adafruits-raspberry-pi-lesson-12-sensing-movement/software
 checkout https://github.com/Mjrovai/RPi-Flask-WebServer
 and https://github.com/raspberrypi/documentation/blob/master/usage/gpio/python/README.md
 
 vibration
 https://www.instructables.com/id/Vibration-Sensor-SW-420-Raspberry-Pi/
 
 
 -------------------
 --- research 
 -------------------
 
 interesting projects to use
 NMEA 0183 protocol reader - https://github.com/Knio/pynmea2
 General intel for networking - https://bitbucket.org/R_P_Ryan/enginemonitor/wiki/Networking_EngineMonitor
 open charts - https://forums.ybw.com/index.php?threads/how-to-use-a-raspberry-pi-for-nmea-over-wifi.447158/
 
